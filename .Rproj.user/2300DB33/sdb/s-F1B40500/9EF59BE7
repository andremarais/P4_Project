{
    "contents" : "file.choose2 <- function(...) {\n  pathname <- NULL;\n  tryCatch({\n    pathname <- file.choose();\n  }, error = function(ex) {\n    \n  })\n  pathname;\n}\n# Themes for plots ====\nplot.theme <- theme(\n  panel.background = element_rect(fill = \"#272b30\"),\n  plot.background = element_rect(fill = \"#272b30\"),\n  axis.text.x = element_text(size = 10),\n  axis.title = element_text(size = 10),\n  panel.grid.major.x = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.grid.major.y = element_blank(),\n  panel.grid.minor.y = element_blank(),\n  axis.text.y = element_blank(),\n  axis.ticks.y = element_blank(),\n  axis.title.y = element_blank(),\n  panel.border = element_blank()\n)\n\nplot.theme.2 <- theme(\n  panel.background = element_rect(fill = \"#272b30\"),\n  plot.background = element_rect(fill = \"#272b30\"),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  axis.text = element_blank(),\n  axis.ticks = element_blank(),\n  axis.title = element_blank(),\n  panel.border = element_blank()\n)\n\n#functions for columns ====\n\nfocus.select <- function(df, ad, measurement, metric, ID, label) {\n  rel.columns <-\n    colnames(df)[which((gregexpr(ad, colnames(df)) != -1) &\n                         (gregexpr(metric, colnames(df)) != -1) &\n                         (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1))]\n  focus.areas <- gsub(paste(measurement, '_', sep = ''),'',rel.columns)\n  focus.areas <-\n    gsub(paste(ad,'\\\\.(jpg_|png_|jpeg_)', sep = ''),'', focus.areas)\n  focus.areas <- gsub('\\\\.\\\\d', '', focus.areas)\n  focus.areas <- gsub(paste('_',metric, sep = ''),'',focus.areas)\n\n  selectInput(ID,\n              label = label,\n              choices = unique(focus.areas))\n}\n\nplot.function <- function(df, ad, measurement, metric, focus, col) {\n  measurements <-\n    df[df$X != 'All Recordings',which((gregexpr(ad, colnames(df)) != -1) &\n                                        (gregexpr(metric, colnames(df)) != -1) &\n                                        (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1) & \n                                        (gregexpr(paste(focus, '_', sep = ''), colnames(df)) != -1))]\n  measurements <- melt(measurements[!is.na(measurements)])\n  \n  if (nrow(measurements) <= 2)\n    return({\n      ggplot(data.frame(label = 'Too few fixations for density plot')) + geom_text(aes(x = 0, y = 0, label = label)) + plot.theme.2\n    })\n  \n  ggplot(data.frame(x = measurements$value)) +\n    geom_density(\n      aes(x = x), col = paste(col,'3', sep = ''), fill = paste(col,'1', sep = ''), alpha = .85\n    ) +\n    plot.theme +\n    xlab('seconds') +\n    ggtitle('Density plot')\n}\n\ntext.function <- function(df, ad, measurement, metric, focus) {\n  measurements <-\n    df[df$X != 'All Recordings',which((gregexpr(ad, colnames(df)) != -1) &\n                                        (gregexpr(metric, colnames(df)) != -1) &\n                                        (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1) & \n                                        (gregexpr(paste(focus, '_', sep = ''), colnames(df)) != -1))]\n  measurements <- melt(measurements[!is.na(measurements)])\n  \n  paste(\n    'Sample size', nrow(measurements),\n    '\\nMean of values', round(mean(measurements$value),2),\n    '\\nStandard deviation', if (is.na(sd(measurements$value)))\n      ''\n    else\n      round(sd(measurements$value),2), sep = ': '\n  )\n}\n\nmw.function <- function(df, ad1, focus1, ad2, focus2, measurement, metric) {\n  measurements1 <-\n    df[df$X != 'All Recordings',which((gregexpr(ad1, colnames(df)) != -1) &\n                                        (gregexpr(metric, colnames(df)) != -1) &\n                                        (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1) & # ^: to look at start of string\n                                        (gregexpr(paste(focus1, '_', sep = ''), colnames(df)) != -1))]\n  measurements2 <-\n    df[df$X != 'All Recordings',which((gregexpr(ad2, colnames(df)) != -1) &\n                                        (gregexpr(metric, colnames(df)) != -1) &\n                                        (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1) &\n                                        (gregexpr(paste(focus2, '_', sep = ''), colnames(df)) != -1))]\n  \n  measurements1 <- measurements1[!is.na(measurements1)]\n  measurements2 <- measurements2[!is.na(measurements2)]\n  \n  w <-\n    wilcox.test(measurements1, measurements2, if (mean(measurements1) < mean(measurements2))\n      'l'\n      else\n        'g')\n  paste(\n    gsub('_|\\\\.', ' ', ad1), \": \", focus1, '\\nvs.\\n',\n    gsub('_|\\\\.', ' ', ad2), \": \", focus2, '\\n\\n',\n    if (max(table(measurements1), table(measurements2)) > 1)\n      \"Tied values, can't compute exact p-value\\n\",\n    'p-value: ', round(w$p.value,4), '\\n\\n',\n    \n    if (w$p.value < 0.05)\n      # Reject H0\n    {\n      paste(\n        'Reject H0.\\n\\n',\n        gsub('_|\\\\.', ' ', ad1), \": \", focus1, ' ', metric, ' values are significantly ', if (mean(measurements1) < mean(measurements2))\n          'less '\n        else\n          'greater than ', gsub('_|\\\\.', ' ', ad2), \": \", focus2, sep = ''\n      )\n    }\n    else\n    {\n      paste(\n        'Fail to reject H0.\\n\\nNo signifcant difference between ', gsub('_|\\\\.', ' ', ad1), \": \", focus1, ' and ', gsub('_|\\\\.', ' ', ad2), \": \", focus2, sep = ''\n      )\n    },\n    \n    sep = ''\n  )\n  \n}\n\n# function for overview ====\noverview <- function(df, ads, measurement, metric) {\n  \n  a <- c()\n  b <- c()\n  c <- c()\n  i <- 1\n  for (ad in ads) {\n    rel.columns <-\n      colnames(df)[which((gregexpr(ad, colnames(df)) != -1) &\n                           (gregexpr(metric, colnames(df)) != -1) &\n                           (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1))]\n    focus.areas <- gsub(paste(measurement, '_', sep = ''),'',rel.columns)\n    focus.areas <-\n      gsub(paste(ad,'\\\\.(jpg_|png_|jpeg_)', sep = ''),'', focus.areas)\n    focus.areas <- gsub('\\\\.\\\\d', '', focus.areas)\n    focus.areas <- gsub(paste('_',metric, sep = ''),'',focus.areas)\n    for (focus.area in focus.areas) {\n      a[i] <- ad\n      b[i] <- focus.area\n      h <-\n        df[df$X != 'All Recordings',which((gregexpr(ad, colnames(df)) != -1) &\n                                            (gregexpr(metric, colnames(df)) != -1) &\n                                            (gregexpr(paste('^',measurement, '_', sep = ''), colnames(df)) != -1) & \n                                            (gregexpr(paste(focus.area, '_', sep = ''), colnames(df)) != -1))]\n      c[i] <- mean(h[!is.na(h)])\n      i <- i + 1\n    }\n  }\n  \n  df <- data.frame(Ad = a, Focus_Areas = b, Mean = c)\n  df <- aggregate(data = df, Mean ~ Ad + Focus_Areas, sum)\n  \n  df$Ad <- gsub('\\\\.|_', ' ', df$Ad)\n  df$Focus_Areas <- gsub('\\\\.|_', ' ', df$Focus_Areas)\n  \n  return(df)\n}\n\n\n# ServerUI====\nshinyServer(function(input, output, session) {\n  # browse & import ====\n#   observe({\n#     if (input$browse == 0)\n#       return()\n#     updateTextInput(session, \"path\",  value = file.choose2())\n#     \n#   })\n  \n  \n  contentInput <- reactive({\n    infile <- input$file1\n    df <- read.delim(infile$datapath, na.strings = '-')\n    cn <- colnames(df[,2:ncol(df)])\n    measurements <- unique(substring(cn,1,sapply(gregexpr('_', cn), '[[',1)-1))\n    ads <- unique(substring(cn, sapply(gregexpr('_', cn), '[[',1) +1, sapply(gregexpr('(\\\\.)(jpg|png|jpe)', cn), '[[',1)-1))\n    \n    isolate({\n      list(df,measurements,ads)\n    })\n  })\n  \n  # metric select ====\n  output$MetricSelect <- renderUI({\n    if (is.null(input$file1))\n      return()\n    selectInput(\n      'MetricSelect',\n      label = 'Select Metric',\n      choices = c('Mean', 'Max', 'Min','Sum', 'Median', 'Stdev'),\n      selected = 'Mean'\n    )\n  })\n  \n  output$MeasurementSelect <- renderUI({\n    if (is.null(input$file1))\n      return()\n    selectInput('MeasurementSelect',\n                label = 'Select Measurement',\n                choices =  contentInput()[[2]],\n                selected =  contentInput()[[2]][1])\n    \n    \n  })\n  \n  \n  \n  \n### Column 1 ----\n  output$AdSelect1 <- renderUI({\n    if (is.null(input$file1))\n      return()\n    selectInput('AdSelect1',\n                label = 'Select Ad 1',\n                choices = contentInput()[[3]],\n                selected = contentInput()[[3]][1])\n    \n  })\n  \n  output$FocusSelect1 <- renderUI({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect1) || input$AdSelect1 == '')\n      return()\n    focus.select(contentInput()[[1]], input$AdSelect1, input$MeasurementSelect, input$MetricSelect, 'FocusSelect1', 'Select focus')\n  })\n  \n  output$plot1 <- renderPlot({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect1) || input$AdSelect1 == '')\n      return()\n    plot.function(contentInput()[[1]], input$AdSelect1, input$MeasurementSelect, input$MetricSelect, input$FocusSelect1, 'dodgerblue')\n  })\n  \n  output$descriptive1 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect1) || input$AdSelect1 == '')\n      return()\n    text.function(contentInput()[[1]], input$AdSelect1, input$MeasurementSelect, input$MetricSelect, input$FocusSelect1)\n  })\n  \n  output$test12 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect1) ||\n        input$AdSelect1 == ''  ||\n        is.null(input$AdSelect2) || input$AdSelect2 == '')\n      return()\n    mw.function(\n      contentInput()[[1]], input$AdSelect1, input$FocusSelect1, input$AdSelect2, input$FocusSelect2, input$MeasurementSelect,input$MetricSelect\n    )\n  })\n  \n  output$test13 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect1) ||\n        input$AdSelect1 == ''  ||\n        is.null(input$AdSelect3) || input$AdSelect3 == '')\n      return()\n    mw.function(\n      contentInput()[[1]], input$AdSelect1, input$FocusSelect1, input$AdSelect3, input$FocusSelect3, input$MeasurementSelect,input$MetricSelect\n    )\n  })\n  \n  \n  \n### Column 2 ----\n  output$AdSelect2 <- renderUI({\n    if (is.null(input$file1))\n      return()\n    selectInput('AdSelect2',\n                label = 'Select Ad 2',\n                choices = contentInput()[[3]],\n                selected = contentInput()[[3]][2])\n    \n  })\n  \n  output$FocusSelect2 <- renderUI({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect2) || input$AdSelect2 == '')\n      return()\n    focus.select(contentInput()[[1]], input$AdSelect2, input$MeasurementSelect, input$MetricSelect, 'FocusSelect2', 'Select focus')\n  })\n  \n  output$plot2 <- renderPlot({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect2) || input$AdSelect2 == '')\n      return()\n    plot.function(contentInput()[[1]], input$AdSelect2, input$MeasurementSelect, input$MetricSelect, input$FocusSelect2, 'olivedrab')\n  })\n  \n  output$descriptive2 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect2) || input$AdSelect2 == '')\n      return()\n    text.function(contentInput()[[1]], input$AdSelect2, input$MeasurementSelect, input$MetricSelect, input$FocusSelect2)\n  })\n  \n  output$test23 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect2) ||\n        input$AdSelect2 == ''  ||\n        is.null(input$AdSelect3) || input$AdSelect3 == '')\n      return()\n    mw.function(\n      contentInput()[[1]], input$AdSelect2, input$FocusSelect2, input$AdSelect3, input$FocusSelect3, input$MeasurementSelect,input$MetricSelect\n    )\n  })\n  \n### Column 3 ----\n  output$AdSelect3 <- renderUI({\n    if (is.null(input$file1))\n      return()\n    selectInput('AdSelect3',\n                label = 'Select Ad 3',\n                choices = contentInput()[[3]],\n                selected = contentInput()[[3]][3])\n    \n  })\n  \n  output$FocusSelect3 <- renderUI({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect3) || input$AdSelect3 == '')\n      return()\n    focus.select(contentInput()[[1]], input$AdSelect3, input$MeasurementSelect, input$MetricSelect, 'FocusSelect3', 'Select focus')\n  })\n  \n  output$plot3 <- renderPlot({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect3) || input$AdSelect3 == '')\n      return()\n    plot.function(contentInput()[[1]], input$AdSelect3, input$MeasurementSelect, input$MetricSelect, input$FocusSelect3, 'firebrick')\n  })\n  \n  output$descriptive3 <- renderText({\n    if (input$file1 == 0 ||\n        is.null(input$AdSelect3) || input$AdSelect3 == '')\n      return()\n    text.function(contentInput()[[1]], input$AdSelect3, input$MeasurementSelect, input$MetricSelect, input$FocusSelect3)\n  })\n  \n  \n  output$OverallView <- renderPlot({\n    if (input$file1 == 0) return()\n    ggplot(overview(contentInput()[[1]], contentInput()[[3]], input$MeasurementSelect, input$MetricSelect)) +\n      geom_histogram(\n        aes(x = reorder(Focus_Areas, Mean),\n            y = Mean),\n        stat = 'identity',\n        col = 'dodgerblue3',\n        fill = 'dodgerblue1',\n        alpha = .85,\n        width = .75,\n        position = 'stack'\n      ) +\n      facet_grid(. ~ Ad) +\n      coord_flip() +\n      theme(\n        panel.background = element_rect(fill = '#272b30'),\n        plot.background = element_rect(fill = '#272b30'),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.title = element_blank(),\n        panel.border = element_blank()) \n  })\n  \n  output$Overalltable <- renderDataTable({\n    if (input$file1 == 0) return()\n    \n    df <- overview(contentInput()[[1]], contentInput()[[3]], input$MeasurementSelect, input$MetricSelect)\n    df$Mean <- round(df$Mean,1)\n    spread(df, Ad, Mean, fill = 0)\n    },\n    options = list(paging = FALSE))\n})\n\n\n",
    "created" : 1452695993070.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2617879803",
    "id" : "9EF59BE7",
    "lastKnownWriteTime" : 1449745887,
    "path" : "C:/Worksies/Mind.Lab/AOI/server.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}